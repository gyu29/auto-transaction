// Generated by view binder compiler. Do not edit!
package com.hanatransaction.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.switchmaterial.SwitchMaterial;
import com.hanatransaction.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentSettingsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton buttonChangePin;

  @NonNull
  public final MaterialButton buttonLogout;

  @NonNull
  public final MaterialButton buttonPrivacyPolicy;

  @NonNull
  public final MaterialButton buttonTermsOfService;

  @NonNull
  public final SwitchMaterial switchBiometric;

  @NonNull
  public final SwitchMaterial switchDarkMode;

  @NonNull
  public final SwitchMaterial switchPaymentReminders;

  @NonNull
  public final SwitchMaterial switchSystemTheme;

  @NonNull
  public final SwitchMaterial switchTransactionAlerts;

  @NonNull
  public final Toolbar toolbar;

  private FragmentSettingsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton buttonChangePin, @NonNull MaterialButton buttonLogout,
      @NonNull MaterialButton buttonPrivacyPolicy, @NonNull MaterialButton buttonTermsOfService,
      @NonNull SwitchMaterial switchBiometric, @NonNull SwitchMaterial switchDarkMode,
      @NonNull SwitchMaterial switchPaymentReminders, @NonNull SwitchMaterial switchSystemTheme,
      @NonNull SwitchMaterial switchTransactionAlerts, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.buttonChangePin = buttonChangePin;
    this.buttonLogout = buttonLogout;
    this.buttonPrivacyPolicy = buttonPrivacyPolicy;
    this.buttonTermsOfService = buttonTermsOfService;
    this.switchBiometric = switchBiometric;
    this.switchDarkMode = switchDarkMode;
    this.switchPaymentReminders = switchPaymentReminders;
    this.switchSystemTheme = switchSystemTheme;
    this.switchTransactionAlerts = switchTransactionAlerts;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonChangePin;
      MaterialButton buttonChangePin = ViewBindings.findChildViewById(rootView, id);
      if (buttonChangePin == null) {
        break missingId;
      }

      id = R.id.buttonLogout;
      MaterialButton buttonLogout = ViewBindings.findChildViewById(rootView, id);
      if (buttonLogout == null) {
        break missingId;
      }

      id = R.id.buttonPrivacyPolicy;
      MaterialButton buttonPrivacyPolicy = ViewBindings.findChildViewById(rootView, id);
      if (buttonPrivacyPolicy == null) {
        break missingId;
      }

      id = R.id.buttonTermsOfService;
      MaterialButton buttonTermsOfService = ViewBindings.findChildViewById(rootView, id);
      if (buttonTermsOfService == null) {
        break missingId;
      }

      id = R.id.switchBiometric;
      SwitchMaterial switchBiometric = ViewBindings.findChildViewById(rootView, id);
      if (switchBiometric == null) {
        break missingId;
      }

      id = R.id.switchDarkMode;
      SwitchMaterial switchDarkMode = ViewBindings.findChildViewById(rootView, id);
      if (switchDarkMode == null) {
        break missingId;
      }

      id = R.id.switchPaymentReminders;
      SwitchMaterial switchPaymentReminders = ViewBindings.findChildViewById(rootView, id);
      if (switchPaymentReminders == null) {
        break missingId;
      }

      id = R.id.switchSystemTheme;
      SwitchMaterial switchSystemTheme = ViewBindings.findChildViewById(rootView, id);
      if (switchSystemTheme == null) {
        break missingId;
      }

      id = R.id.switchTransactionAlerts;
      SwitchMaterial switchTransactionAlerts = ViewBindings.findChildViewById(rootView, id);
      if (switchTransactionAlerts == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new FragmentSettingsBinding((CoordinatorLayout) rootView, buttonChangePin,
          buttonLogout, buttonPrivacyPolicy, buttonTermsOfService, switchBiometric, switchDarkMode,
          switchPaymentReminders, switchSystemTheme, switchTransactionAlerts, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
